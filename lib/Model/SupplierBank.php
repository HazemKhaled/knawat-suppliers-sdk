<?php
/**
 * SupplierBank
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knawat supplier API Documentation
 *
 * Knawat Supply API allows you to list your products on Knawat and get purchase orders, it's also allow you to set order status and shipping tracking number. ## Getting Started In Knawat each supplier has a different `consumerKey` and `consumerSecret`, which you can get from your account manager. You need those keys for API authorization. Knawat suppliers npm package: [![npm version](https://badge.fury.io/js/%40knawat%2Fsuppliers.svg)](https://badge.fury.io/js/%40knawat%2Fsuppliers). ## Support and Chat   We are happy to receive your questions. click here to [chat with us](https://gitter.im/Knawat/Lobby).  ## Errors Handling   This API uses standard HTTP status codes to indicate the status of a   response.    There are two main categories of error responses. Each have a different   response payload structure.    * Simple errors   * Detailed errors    # Simple errors    | Name | Code | Description |   | -------- | -------- | -------- |   | Bad request     | 400     | The request was unacceptable     |   | Unauthorized     | 401     | The request has not been applied because it lacks valid authentication credentials for the target resource.     |   | Forbidden     | 403     | The server understood the request, but is refusing to fulfill it     |   | Not Found     | 404     | The server has not found anything matching the request URI     |   | Not acceptable     | 406     | The server is unable to return a response in the format that was requested by the client     |   | Unsupported Media Type     | 415     | The server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method |   | Too many requests     | 429     | Too many requests hit the API too quickly |   | Server error     | 500     | A technical error occurred |    # Detailed errors   | Name | Code | Description |   | -------- | -------- | -------- |   | Un-processable entity     | 422     | The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions. |
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@knawat.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SupplierBank Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SupplierBank implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Supplier_bank';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'swift_code' => 'string',
'iban_no' => 'string',
'account_number' => 'string',
'recipient_name' => 'string',
'recipient_address' => 'string',
'bank_country' => 'string',
'bank_branch' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'swift_code' => null,
'iban_no' => null,
'account_number' => null,
'recipient_name' => null,
'recipient_address' => null,
'bank_country' => null,
'bank_branch' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'swift_code' => 'swift_code',
'iban_no' => 'iban_no',
'account_number' => 'account_number',
'recipient_name' => 'recipient_name',
'recipient_address' => 'recipient_address',
'bank_country' => 'bank_country',
'bank_branch' => 'bank_branch'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'swift_code' => 'setSwiftCode',
'iban_no' => 'setIbanNo',
'account_number' => 'setAccountNumber',
'recipient_name' => 'setRecipientName',
'recipient_address' => 'setRecipientAddress',
'bank_country' => 'setBankCountry',
'bank_branch' => 'setBankBranch'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'swift_code' => 'getSwiftCode',
'iban_no' => 'getIbanNo',
'account_number' => 'getAccountNumber',
'recipient_name' => 'getRecipientName',
'recipient_address' => 'getRecipientAddress',
'bank_country' => 'getBankCountry',
'bank_branch' => 'getBankBranch'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['swift_code'] = isset($data['swift_code']) ? $data['swift_code'] : null;
        $this->container['iban_no'] = isset($data['iban_no']) ? $data['iban_no'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['recipient_name'] = isset($data['recipient_name']) ? $data['recipient_name'] : null;
        $this->container['recipient_address'] = isset($data['recipient_address']) ? $data['recipient_address'] : null;
        $this->container['bank_country'] = isset($data['bank_country']) ? $data['bank_country'] : null;
        $this->container['bank_branch'] = isset($data['bank_branch']) ? $data['bank_branch'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['swift_code'] === null) {
            $invalidProperties[] = "'swift_code' can't be null";
        }
        if ($this->container['recipient_name'] === null) {
            $invalidProperties[] = "'recipient_name' can't be null";
        }
        if ($this->container['recipient_address'] === null) {
            $invalidProperties[] = "'recipient_address' can't be null";
        }
        if ($this->container['bank_country'] === null) {
            $invalidProperties[] = "'bank_country' can't be null";
        }
        if ($this->container['bank_branch'] === null) {
            $invalidProperties[] = "'bank_branch' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets swift_code
     *
     * @return string
     */
    public function getSwiftCode()
    {
        return $this->container['swift_code'];
    }

    /**
     * Sets swift_code
     *
     * @param string $swift_code swift_code
     *
     * @return $this
     */
    public function setSwiftCode($swift_code)
    {
        $this->container['swift_code'] = $swift_code;

        return $this;
    }

    /**
     * Gets iban_no
     *
     * @return string
     */
    public function getIbanNo()
    {
        return $this->container['iban_no'];
    }

    /**
     * Sets iban_no
     *
     * @param string $iban_no Either iban_no or account_number is required. it is dependent on country
     *
     * @return $this
     */
    public function setIbanNo($iban_no)
    {
        $this->container['iban_no'] = $iban_no;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number Either iban_no or account_number is required. it is dependent on country
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets recipient_name
     *
     * @return string
     */
    public function getRecipientName()
    {
        return $this->container['recipient_name'];
    }

    /**
     * Sets recipient_name
     *
     * @param string $recipient_name recipient_name
     *
     * @return $this
     */
    public function setRecipientName($recipient_name)
    {
        $this->container['recipient_name'] = $recipient_name;

        return $this;
    }

    /**
     * Gets recipient_address
     *
     * @return string
     */
    public function getRecipientAddress()
    {
        return $this->container['recipient_address'];
    }

    /**
     * Sets recipient_address
     *
     * @param string $recipient_address recipient_address
     *
     * @return $this
     */
    public function setRecipientAddress($recipient_address)
    {
        $this->container['recipient_address'] = $recipient_address;

        return $this;
    }

    /**
     * Gets bank_country
     *
     * @return string
     */
    public function getBankCountry()
    {
        return $this->container['bank_country'];
    }

    /**
     * Sets bank_country
     *
     * @param string $bank_country Country should be (ISO 3166) 2 letter capital letters
     *
     * @return $this
     */
    public function setBankCountry($bank_country)
    {
        $this->container['bank_country'] = $bank_country;

        return $this;
    }

    /**
     * Gets bank_branch
     *
     * @return string
     */
    public function getBankBranch()
    {
        return $this->container['bank_branch'];
    }

    /**
     * Sets bank_branch
     *
     * @param string $bank_branch bank_branch
     *
     * @return $this
     */
    public function setBankBranch($bank_branch)
    {
        $this->container['bank_branch'] = $bank_branch;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
