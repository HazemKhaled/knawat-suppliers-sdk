<?php
/**
 * Supplier
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Knawat supplier API Documentation
 *
 * Knawat Supply API allows you to list your products on Knawat and get purchase orders, it's also allow you to set order status and shipping tracking number. ## Getting Started In Knawat each supplier has a different `consumerKey` and `consumerSecret`, which you can get from your account manager. You need those keys for API authorization. Knawat suppliers npm package: [![npm version](https://badge.fury.io/js/%40knawat%2Fsuppliers.svg)](https://badge.fury.io/js/%40knawat%2Fsuppliers). ## Support and Chat   We are happy to receive your questions. click here to [chat with us](https://gitter.im/Knawat/Lobby).  ## Errors Handling   This API uses standard HTTP status codes to indicate the status of a   response.    There are two main categories of error responses. Each have a different   response payload structure.    * Simple errors   * Detailed errors    # Simple errors    | Name | Code | Description |   | -------- | -------- | -------- |   | Bad request     | 400     | The request was unacceptable     |   | Unauthorized     | 401     | The request has not been applied because it lacks valid authentication credentials for the target resource.     |   | Forbidden     | 403     | The server understood the request, but is refusing to fulfill it     |   | Not Found     | 404     | The server has not found anything matching the request URI     |   | Not acceptable     | 406     | The server is unable to return a response in the format that was requested by the client     |   | Unsupported Media Type     | 415     | The server is refusing to service the request because the entity of the request is in a format not supported by the requested resource for the requested method |   | Too many requests     | 429     | Too many requests hit the API too quickly |   | Server error     | 500     | A technical error occurred |    # Detailed errors   | Name | Code | Description |   | -------- | -------- | -------- |   | Un-processable entity     | 422     | The server understands the content type of the request entity, and the syntax of the request entity is correct, but was unable to process the contained instructions. |
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@knawat.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.16
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Supplier Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Supplier implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Supplier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'name' => 'string',
'project_key' => 'string',
'email' => 'string',
'logo' => 'string',
'excluded_brands' => 'string',
'excluded_attributes' => 'string',
'excluded_categories' => 'string',
'skipping_words' => 'string',
'vat' => 'float',
'url' => 'string',
'active' => 'bool',
'beta' => 'bool',
'cost_price' => 'float',
'sale_price' => 'float',
'currency_rate' => 'float',
'currency' => 'string',
'languages' => 'string[]',
'created_date' => '\DateTime',
'updated_date' => '\DateTime',
'address' => '\Swagger\Client\Model\SupplierAddress[]',
'billing' => '\Swagger\Client\Model\SupplierBilling',
'bank' => '\Swagger\Client\Model\SupplierBank',
'users' => '\Swagger\Client\Model\SupplierUsers[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'project_key' => null,
'email' => null,
'logo' => null,
'excluded_brands' => null,
'excluded_attributes' => null,
'excluded_categories' => null,
'skipping_words' => null,
'vat' => null,
'url' => null,
'active' => null,
'beta' => null,
'cost_price' => null,
'sale_price' => null,
'currency_rate' => null,
'currency' => null,
'languages' => null,
'created_date' => 'date-time',
'updated_date' => 'date-time',
'address' => null,
'billing' => null,
'bank' => null,
'users' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'project_key' => 'project_key',
'email' => 'email',
'logo' => 'logo',
'excluded_brands' => 'excluded_brands',
'excluded_attributes' => 'excluded_attributes',
'excluded_categories' => 'excluded_categories',
'skipping_words' => 'skipping_words',
'vat' => 'vat',
'url' => 'url',
'active' => 'active',
'beta' => 'beta',
'cost_price' => 'cost_price',
'sale_price' => 'sale_price',
'currency_rate' => 'currency_rate',
'currency' => 'currency',
'languages' => 'languages',
'created_date' => 'created_date',
'updated_date' => 'updated_date',
'address' => 'address',
'billing' => 'billing',
'bank' => 'bank',
'users' => 'users'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'project_key' => 'setProjectKey',
'email' => 'setEmail',
'logo' => 'setLogo',
'excluded_brands' => 'setExcludedBrands',
'excluded_attributes' => 'setExcludedAttributes',
'excluded_categories' => 'setExcludedCategories',
'skipping_words' => 'setSkippingWords',
'vat' => 'setVat',
'url' => 'setUrl',
'active' => 'setActive',
'beta' => 'setBeta',
'cost_price' => 'setCostPrice',
'sale_price' => 'setSalePrice',
'currency_rate' => 'setCurrencyRate',
'currency' => 'setCurrency',
'languages' => 'setLanguages',
'created_date' => 'setCreatedDate',
'updated_date' => 'setUpdatedDate',
'address' => 'setAddress',
'billing' => 'setBilling',
'bank' => 'setBank',
'users' => 'setUsers'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'project_key' => 'getProjectKey',
'email' => 'getEmail',
'logo' => 'getLogo',
'excluded_brands' => 'getExcludedBrands',
'excluded_attributes' => 'getExcludedAttributes',
'excluded_categories' => 'getExcludedCategories',
'skipping_words' => 'getSkippingWords',
'vat' => 'getVat',
'url' => 'getUrl',
'active' => 'getActive',
'beta' => 'getBeta',
'cost_price' => 'getCostPrice',
'sale_price' => 'getSalePrice',
'currency_rate' => 'getCurrencyRate',
'currency' => 'getCurrency',
'languages' => 'getLanguages',
'created_date' => 'getCreatedDate',
'updated_date' => 'getUpdatedDate',
'address' => 'getAddress',
'billing' => 'getBilling',
'bank' => 'getBank',
'users' => 'getUsers'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['project_key'] = isset($data['project_key']) ? $data['project_key'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['logo'] = isset($data['logo']) ? $data['logo'] : null;
        $this->container['excluded_brands'] = isset($data['excluded_brands']) ? $data['excluded_brands'] : null;
        $this->container['excluded_attributes'] = isset($data['excluded_attributes']) ? $data['excluded_attributes'] : null;
        $this->container['excluded_categories'] = isset($data['excluded_categories']) ? $data['excluded_categories'] : null;
        $this->container['skipping_words'] = isset($data['skipping_words']) ? $data['skipping_words'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['beta'] = isset($data['beta']) ? $data['beta'] : null;
        $this->container['cost_price'] = isset($data['cost_price']) ? $data['cost_price'] : null;
        $this->container['sale_price'] = isset($data['sale_price']) ? $data['sale_price'] : null;
        $this->container['currency_rate'] = isset($data['currency_rate']) ? $data['currency_rate'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['updated_date'] = isset($data['updated_date']) ? $data['updated_date'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['billing'] = isset($data['billing']) ? $data['billing'] : null;
        $this->container['bank'] = isset($data['bank']) ? $data['bank'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['languages'] === null) {
            $invalidProperties[] = "'languages' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique identification to represent a supplier
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Supplier name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets project_key
     *
     * @return string
     */
    public function getProjectKey()
    {
        return $this->container['project_key'];
    }

    /**
     * Sets project_key
     *
     * @param string $project_key No spaces, no special characters
     *
     * @return $this
     */
    public function setProjectKey($project_key)
    {
        $this->container['project_key'] = $project_key;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Unique email of supplier
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string $logo PNG alpha image, recommended 512*512px
     *
     * @return $this
     */
    public function setLogo($logo)
    {
        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets excluded_brands
     *
     * @return string
     */
    public function getExcludedBrands()
    {
        return $this->container['excluded_brands'];
    }

    /**
     * Sets excluded_brands
     *
     * @param string $excluded_brands Comma separated brands to exclude. product will automatically disqualify if it has brand from this value
     *
     * @return $this
     */
    public function setExcludedBrands($excluded_brands)
    {
        $this->container['excluded_brands'] = $excluded_brands;

        return $this;
    }

    /**
     * Gets excluded_attributes
     *
     * @return string
     */
    public function getExcludedAttributes()
    {
        return $this->container['excluded_attributes'];
    }

    /**
     * Sets excluded_attributes
     *
     * @param string $excluded_attributes Comma separated attributes to exclude. product will automatically disqualify if it has attributes from this value
     *
     * @return $this
     */
    public function setExcludedAttributes($excluded_attributes)
    {
        $this->container['excluded_attributes'] = $excluded_attributes;

        return $this;
    }

    /**
     * Gets excluded_categories
     *
     * @return string
     */
    public function getExcludedCategories()
    {
        return $this->container['excluded_categories'];
    }

    /**
     * Sets excluded_categories
     *
     * @param string $excluded_categories Comma separated categories to exclude. product will automatically disqualify if it has category from this value
     *
     * @return $this
     */
    public function setExcludedCategories($excluded_categories)
    {
        $this->container['excluded_categories'] = $excluded_categories;

        return $this;
    }

    /**
     * Gets skipping_words
     *
     * @return string
     */
    public function getSkippingWords()
    {
        return $this->container['skipping_words'];
    }

    /**
     * Sets skipping_words
     *
     * @param string $skipping_words Comma separated words to remove from name and description
     *
     * @return $this
     */
    public function setSkippingWords($skipping_words)
    {
        $this->container['skipping_words'] = $skipping_words;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return float
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param float $vat vat to add on product if vat is not provided in product variation
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url Supplier online store URL
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active true or false
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets beta
     *
     * @return bool
     */
    public function getBeta()
    {
        return $this->container['beta'];
    }

    /**
     * Sets beta
     *
     * @param bool $beta true or false
     *
     * @return $this
     */
    public function setBeta($beta)
    {
        $this->container['beta'] = $beta;

        return $this;
    }

    /**
     * Gets cost_price
     *
     * @return float
     */
    public function getCostPrice()
    {
        return $this->container['cost_price'];
    }

    /**
     * Sets cost_price
     *
     * @param float $cost_price cost_price
     *
     * @return $this
     */
    public function setCostPrice($cost_price)
    {
        $this->container['cost_price'] = $cost_price;

        return $this;
    }

    /**
     * Gets sale_price
     *
     * @return float
     */
    public function getSalePrice()
    {
        return $this->container['sale_price'];
    }

    /**
     * Sets sale_price
     *
     * @param float $sale_price sale_price
     *
     * @return $this
     */
    public function setSalePrice($sale_price)
    {
        $this->container['sale_price'] = $sale_price;

        return $this;
    }

    /**
     * Gets currency_rate
     *
     * @return float
     */
    public function getCurrencyRate()
    {
        return $this->container['currency_rate'];
    }

    /**
     * Sets currency_rate
     *
     * @param float $currency_rate currency_rate
     *
     * @return $this
     */
    public function setCurrencyRate($currency_rate)
    {
        $this->container['currency_rate'] = $currency_rate;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The default currency for products price
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return string[]
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param string[] $languages languages
     *
     * @return $this
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date The date the supplier was created
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime $updated_date The last date the supplier was updated.
     *
     * @return $this
     */
    public function setUpdatedDate($updated_date)
    {
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\SupplierAddress[]
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\SupplierAddress[] $address One or more address for supplier warehouses
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets billing
     *
     * @return \Swagger\Client\Model\SupplierBilling
     */
    public function getBilling()
    {
        return $this->container['billing'];
    }

    /**
     * Sets billing
     *
     * @param \Swagger\Client\Model\SupplierBilling $billing billing
     *
     * @return $this
     */
    public function setBilling($billing)
    {
        $this->container['billing'] = $billing;

        return $this;
    }

    /**
     * Gets bank
     *
     * @return \Swagger\Client\Model\SupplierBank
     */
    public function getBank()
    {
        return $this->container['bank'];
    }

    /**
     * Sets bank
     *
     * @param \Swagger\Client\Model\SupplierBank $bank bank
     *
     * @return $this
     */
    public function setBank($bank)
    {
        $this->container['bank'] = $bank;

        return $this;
    }

    /**
     * Gets users
     *
     * @return \Swagger\Client\Model\SupplierUsers[]
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param \Swagger\Client\Model\SupplierUsers[] $users At least one owner should be there in the array
     *
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
